<Project TreatAsLocalProperty="Dev" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
      Declare our supported frameworks so they (eventually, not working on 15.3) show up in 
      the target framework selection dropdown. 
  -->
  <ItemGroup>
    <SupportedTargetFramework Include="net462" DisplayName="Visual Studio 2017" />
    <SupportedTargetFramework Include="net461" DisplayName="Visual Studio 2015" />
    <SupportedTargetFramework Include="net46" DisplayName="Visual Studio 2013" />
  </ItemGroup>

  <PropertyGroup>
    <!-- We only support building/loading on VS2017+ -->
    <MinimumVisualStudioVersion>15.0</MinimumVisualStudioVersion>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>

    <!-- 
        If a project targets one specific TF, it means it's VS version agnostic from that 
        VS version and up (i.e. if it targets net46, it's a single assembly for VS2013+),
        so we don't need to inject all the supported target frameworks. 
        This means that the project will reference only those VSSDK assemblies for the 
        matching VS version and nothing else.
        Also, VSSDK build tools will be latest & greatest in that case too.
		-->
    <TargetFrameworks Condition="'$(TargetFrameworks)' == '' And '$(TargetFramework)' == ''">net462;net461;net46</TargetFrameworks>

    <!-- 
        Replicate here since otherwise it's only set on the CSharp.targets, too late. 
	      NOTE: we consider ActiveDebugFramework==TargetFramework for non-cross targeting detection. 
    -->
    <IsCrossTargetingBuild Condition="
							   '$(IsCrossTargetingBuild)' == '' And 
							   '$(TargetFrameworks)' != '' And 
							   '$(TargetFramework)' == ''">true</IsCrossTargetingBuild>
  </PropertyGroup>

  <!-- The .user target isn't imported in the crosstargeting version of the Common targets -->
  <Import Project="$(MSBuildProjectFullPath).user" Condition="'$(IsCrossTargetingBuild)' == 'true' And Exists('$(MSBuildProjectFullPath).user')" />

  <PropertyGroup>
    <Dev Condition="'$(Dev)' == '.'">$(VisualStudioVersion)</Dev>
    <Dev Condition="'$(Dev)' == '' And '$(ActiveDebugFramework)' == 'net462'">15</Dev>
    <Dev Condition="'$(Dev)' == '' And '$(ActiveDebugFramework)' == 'net461'">14</Dev>
    <Dev Condition="'$(Dev)' == '' And '$(ActiveDebugFramework)' == 'net46'">12</Dev>

    <!-- Preserve the explicit original value (either from Dev or ActiveDebugFramework) before defaulting -->
    <_Dev>$(Dev)</_Dev>

    <!-- If no ActiveDebugFramework was set, just set it to the one we determined, for consistency -->
    <ActiveDebugFramework Condition="'$(Dev)' == '15' And '$(ActiveDebugFramework)' == ''">net462</ActiveDebugFramework>
    <ActiveDebugFramework Condition="'$(Dev)' == '14' And '$(ActiveDebugFramework)' == ''">net461</ActiveDebugFramework>
    <ActiveDebugFramework Condition="'$(Dev)' == '12' And '$(ActiveDebugFramework)' == ''">net46</ActiveDebugFramework>

    <!-- The Run dropdown doesn't set the TargetFramework in this case, so we do it ourselves -->
    <TargetFramework Condition="'$(TargetFramework)' == '' And '$(ActiveDebugFramework)' != ''">$(ActiveDebugFramework)</TargetFramework>
  </PropertyGroup>

  <!--
      Provides the default value for $(Dev) according to the current $(TargetFramework) 
      which is automatically specified by the cross-targeting build for each value in 
      $(TargetFrameworks), or alternatively, by the upcoming Framework selector dropdown 
      in VS2017.3 (see https://github.com/dotnet/roslyn-project-system/issues/1674).
  -->
  <PropertyGroup Condition="'$(Dev)' == ''">
    <Dev Condition="'$(TargetFramework)' == 'net462'">15</Dev>
    <Dev Condition="'$(TargetFramework)' == 'net461'">14</Dev>
    <Dev Condition="'$(TargetFramework)' == 'net46'">12</Dev>
  </PropertyGroup>

  <!--
      Append $(Dev) to output and intermediate paths to prevent bin clashes between targets.
  -->
  <PropertyGroup>
    <IntermediateOutputPath>$(IntermediateOutputPath)$(Dev)\</IntermediateOutputPath>
    <OutputPath>$(OutputPath)$(Dev)\</OutputPath>
  </PropertyGroup>

  <!-- 
      Overrides the $(TargetFrameworks) with a specific target to build 
      when a $(Dev) value is explicitly provided (either explicitly or implicitly 
      via the ActiveDebugFramework, which is why we use _). This allows
      building for each VS individually, using its own VSSDK.BuildTools 
      (since only one can be loaded in a given build process).
      This prevents a cross-targeting build to occur.
	  
      When doing msbuild /t:restore, the $(Dev) value will not be provided 
      and therefore all TFMs will be properly restored.

      NOTE: we can't just provide TargetFramework, since we'd otherwise lose 
      nuget-provided imports that already happened. 

      NOTE: we don't override this value unless it was explicitly set either via 
      $(Dev) or $(ActiveDebugFramework) since otherwise we'd break restore and 
      cross-targeting build.
  -->
  <PropertyGroup Condition="'$(_Dev)' != ''">
    <TargetFrameworks Condition="'$(_Dev)' == '15'">net462</TargetFrameworks>
    <TargetFrameworks Condition="'$(_Dev)' == '14'">net461</TargetFrameworks>
    <TargetFrameworks Condition="'$(_Dev)' == '12'">net46</TargetFrameworks>
  </PropertyGroup>

  <!-- 
      This property is important since while restoring, we need to report all the packages for all the 
      target frameworks, in particular, the VSSDK.BuildTools, even if we know that during a cross-targeting 
      build, you can only have *one* VSSDK.BuildTools loaded at a time (because of the Tasks assembly being 
      loaded first and winning, potentially causing the VSSDK targets to be inconsistent). 
      The combination of properties to check was reverse-engineered from the NuGet targets at 
      https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L54-L56
  -->
  <PropertyGroup>
    <IsRestoring Condition="'$(NuGetRestoreTargets)' != '' And '$(ExcludeRestorePackageImports)' == 'true'">true</IsRestoring>
  </PropertyGroup>

  <!-- 
      This works in MSBuild 15.3+ and allows us to determine if the current build is 
      a cross-targeting build, so we can load the appropriate VSSDK build tools. 
  -->
  <ItemDefinitionGroup>
    <_InnerBuildProjects>
      <Properties>IsCrossTargetedBuild=$(IsCrossTargetingBuild)</Properties>
    </_InnerBuildProjects>
  </ItemDefinitionGroup>
</Project>